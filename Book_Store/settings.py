"""
Django settings for Book_Store project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4yz1_9-ni#_0&zlg)&a94z1*s!3cv-w)ij19cbx+zcvk-dcbjv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'APPS.account',
    'APPS.shouye',
    'APPS.banner',
    'APPS.biaoqian',
    'APPS.category',
    'APPS.zhangjie_mulu',
    'APPS.search',
    'APPS.book_detail',
    'APPS.shopcar',
    'APPS.dingdan',
    'APPS.mypay',
    'xadmin',
    'crispy_forms',
    'djcelery',
    'DjangoUeditor'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Book_Store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'APPS.shopcar.sum_count.book_count',
            ],
            # 自定义tags一定要在这里配置  键是具体的tag名称  值是tag所在的路径  libraries是关键字
            'libraries': {
                "chengfa": "APPS.shopcar.templatetags.chengfa",
            },
        },
    },
]

WSGI_APPLICATION = 'Book_Store.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "book_store",
        'USER': "root",
        'PASSWORD': "wwwwwwww1",
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIR = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'APPS/banner/static'),
    os.path.join(BASE_DIR, 'APPS/shouye/static'),
    os.path.join(BASE_DIR, 'APPS/book_detail/static'),
    os.path.join(BASE_DIR, 'APPS/shopcar/static'),
    os.path.join(BASE_DIR, 'APPS/dingdan/static'),
)
# =======Alipay相关配置======
APP_ID = '2016092100559345'
ALI_PAY_URL = ''
# 测试支付环境
ALI_PAY_DEV_URL = 'https://openapi.alipaydev.com/gateway.do?'
# 公钥配置
APP_PUBLIC_STRING = open(BASE_DIR + '/pay/rsa_public_key.pem').read()
# 私钥配置
APP_PRIVATE_STRING = open(BASE_DIR + '/pay/rsa_private_key.pem').read()
############### celery settings begin #############
'''
celery是分布式异步消息队列处理框架
以redis作为MQ数据存储和转发
'''
REDIS_DEPLOY_FLAG = "test"

REDIS_SERVICE = {
    'test': ('127.0.0.1', '6379'),
    # 'online': ('192.168.11.11', '10379'),
}

CELERY_BROKER_URL = 'redis://%s:%s/1' % (REDIS_SERVICE[REDIS_DEPLOY_FLAG][0],
                                         REDIS_SERVICE[REDIS_DEPLOY_FLAG][1])

CELERY_ACCEPT_CONTENT = ['json']

CELERY_TASK_SERIALIZER = 'json'

# CELERY_RESULT_BACKEND = 'django-db'

CELERY_RESULT_BACKEND = 'redis://%s:%s/2' % (REDIS_SERVICE[REDIS_DEPLOY_FLAG][0],
                                             REDIS_SERVICE[REDIS_DEPLOY_FLAG][1])

# 部署的django服务的IP和端口
DJANGO_SERVICE = ('127.0.0.1', 8000)

import redis

R = redis.Redis(host='127.0.0.1', port=6379, db=0)
CACHES = {
    'default': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/1" % (REDIS_SERVICE[REDIS_DEPLOY_FLAG][0],
                                         REDIS_SERVICE[REDIS_DEPLOY_FLAG][1]),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

############### celery settings end #############
# 发送邮件配置
EMAIL_HOST = "smtp.qq.com"
EMAIL_PORT = 25
EMAIL_HOST_USER = '1243488616@qq.com'
EMAIL_HOST_PASSWORD = 'uxouqhyhziumjibc'
EMAIL_USE_TLS = False
EMAIL_FROM = '1243488616@qq.com'  # 和user名称保持一致，不然报错（指明发件人）
